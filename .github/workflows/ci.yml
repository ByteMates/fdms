name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      run_smoke:
        description: "Run docker compose up and ping services"
        required: false
        type: boolean
        default: false

permissions:
  contents: read

jobs:
  build_test:
    name: Restore & Test (.NET)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Cache NuGet
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: nuget-${{ runner.os }}-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            nuget-${{ runner.os }}-

      - name: Restore all solutions
        run: |
          find . -name "*.sln" -maxdepth 2 -print0 | xargs -0 -I{} dotnet restore "{}"

      - name: Run tests (TRX + coverage)
        run: |
          set -e
          mapfile -t tests < <(find . -name "*Test.csproj")
          for t in "${tests[@]}"; do
            echo "Testing $t"
            dotnet test "$t" -c Release --no-build \
              --logger "trx;LogFileName=test-results.trx" \
              /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura
          done

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: |
            **/TestResults/test-results.trx
            **/coverage.cobertura.xml
          if-no-files-found: ignore

  build_images:
    name: Build Docker images (compose)
    runs-on: ubuntu-latest
    needs: build_test
    steps:
      - uses: actions/checkout@v4

      - name: Show Docker versions
        run: |
          docker version
          docker compose version

      - name: Enable BuildKit
        run: |
          echo "DOCKER_BUILDKIT=1" >> $GITHUB_ENV
          echo "COMPOSE_DOCKER_CLI_BUILD=1" >> $GITHUB_ENV

      - name: Build all images via compose
        run: |
          docker compose build
          docker images

  smoke:
    name: Smoke test (optional compose up)
    if: ${{ github.event_name == 'workflow_dispatch' && inputs.run_smoke }}
    runs-on: ubuntu-latest
    needs: build_images
    env:
      SA_PASSWORD: ${{ secrets.SA_PASSWORD }}   # add this secret if you plan to run smoke
    steps:
      - uses: actions/checkout@v4

      - name: Create .env for compose (SQL password)
        run: |
          echo "SA_PASSWORD=${SA_PASSWORD:-ChangeMe!2345}" > .env
          cat .env

      - name: Compose up
        run: docker compose up -d

      - name: Wait for services (SQL + APIs)
        run: |
          try_curl () {
            url="$1"; name="$2"; attempts=40; sleep_s=5
            for i in $(seq 1 $attempts); do
              if curl -fsS "$url" >/dev/null 2>&1; then
                echo "OK: $name - $url"; return 0
              fi
              echo "waiting ($i/$attempts): $name - $url"
              sleep $sleep_s
            done
            echo "FAIL: $name - $url"; return 1
          }

          # Prefer gateway if it exists on 7104; else hit services directly
          if curl -fsS http://localhost:7104/claims/ping >/dev/null 2>&1; then
            try_curl http://localhost:7104/auth/ping auth
            try_curl http://localhost:7104/employees/ping employees
            try_curl http://localhost:7104/documents/ping documents
            try_curl http://localhost:7104/claims/ping claims
          else
            try_curl http://localhost:7123/ping auth
            try_curl http://localhost:7141/ping employees
            try_curl http://localhost:7133/ping documents
            try_curl http://localhost:7151/ping claims
          fi

      - name: Dump last logs (on failure)
        if: failure()
        run: docker compose logs --no-color | tail -n 400

      - name: Compose down (cleanup)
        if: always()
        run: docker compose down -v
