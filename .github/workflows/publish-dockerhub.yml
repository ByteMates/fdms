name: Publish Docker Hub

on:
  push:
    branches: [ main ]
    tags: [ 'v*.*.*' ]   # optional: push versioned tags like v1.2.3
  pull_request:
    branches: [ main ]   # run tests/build on PRs

jobs:
  test:
    name: Restore & Test (.NET)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'
      - name: Restore/Build/Test (auto-detect)
        shell: bash
        run: |
          set -euo pipefail
          shopt -s globstar nullglob
          SLN=(**/*.sln)
          if [ ${#SLN[@]} -gt 0 ]; then
            echo "Using solution: ${SLN[0]}"
            dotnet restore "${SLN[0]}"
            dotnet build "${SLN[0]}" -c Release --no-restore
            dotnet test  "${SLN[0]}" -c Release --no-build --logger "trx;LogFileName=test-results.trx"
          else
            echo "No .sln found; restoring/building each project"
            PROJS=(**/*.csproj)
            for p in "${PROJS[@]}"; do
              echo "Restore $p"
              dotnet restore "$p"
            done
            for p in "${PROJS[@]}"; do
              echo "Build   $p"
              dotnet build "$p" -c Release --no-restore
            done
            echo "Discovering test projects"
            TESTPROJS=()
            while IFS= read -r -d '' f; do TESTPROJS+=("$f"); done < <(grep -rlZ "<IsTestProject>true</IsTestProject>" -- **/*.csproj || true)
            if [ ${#TESTPROJS[@]} -gt 0 ]; then
              for t in "${TESTPROJS[@]}"; do
                echo "Test    $t"
                dotnet test "$t" -c Release --no-build --logger "trx;LogFileName=test-results.trx"
              done
            else
              echo "No test projects found; skipping dotnet test"
            fi
          fi
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: '**/TestResults/*.trx'

  publish:
    name: Build & Push Images
    needs: test
    if: github.event_name == 'push'   # don't push on PRs
    runs-on: ubuntu-latest
    env:
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: authservice
            image_suffix: fdms-authservice
            context: AuthService/AuthService
            dockerfile: AuthService/AuthService/Dockerfile
          - name: employeeservice
            image_suffix: fdms-employeeservice
            context: EmployeeService/EmployeeService
            dockerfile: EmployeeService/EmployeeService/Dockerfile
          - name: documentservice
            image_suffix: fdms-documentservice
            context: DocumentService/DocumentService
            dockerfile: DocumentService/DocumentService/Dockerfile
          - name: claimservice
            image_suffix: fdms-claimservice
            context: ClaimService/ClaimService
            dockerfile: ClaimService/ClaimService/Dockerfile
          - name: apigateway
            image_suffix: fdms-apigateway
            context: CentralAPIGateway
            dockerfile: CentralAPIGateway/Dockerfile

    steps:
      - uses: actions/checkout@v4

      - name: Debug repo layout (top 3 levels)
        run: |
          pwd
          ls -la
          find . -maxdepth 3 -type d -print | sort

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Compute image name
        id: vars
        run: echo "IMAGE=${DOCKERHUB_USERNAME}/${{ matrix.image_suffix }}" >> $GITHUB_OUTPUT

      # Resolve correct build context + Dockerfile based on actual repo layout
      - name: Resolve build paths
        id: path
        shell: bash
        run: |
          set -euo pipefail
          NAME="${{ matrix.name }}"

          pick_first_dir() {
            for d in "$@"; do
              if [ -d "$d" ]; then echo "$d"; return 0; fi
            done
            return 1
          }

          case "$NAME" in
            authservice)
              CTX=$(pick_first_dir "Portal/AuthService/AuthService" "Portal/AuthService" "AuthService")
              ;;
            employeeservice)
              CTX=$(pick_first_dir "Portal/EmployeeService/EmployeeService" "Portal/EmployeeService" "EmployeeService")
              ;;
            documentservice)
              CTX=$(pick_first_dir "Portal/DocumentService/DocumentService" "Portal/DocumentService" "DocumentService")
              ;;
            claimservice)
              CTX=$(pick_first_dir "Portal/ClaimService/ClaimService" "Portal/ClaimService" "ClaimService")
              ;;
            apigateway)
              CTX=$(pick_first_dir "Portal/CentralAPIGateway" "Portal/ApiGateway" "CentralAPIGateway" "ApiGateway")
              ;;
            *)
              echo "Unknown service: $NAME"; exit 1;;
          esac

          if [ -z "${CTX:-}" ]; then
            echo "Could not find build context for $NAME. Repo layout:" >&2
            find . -maxdepth 4 -type d -print >&2
            exit 1
          fi

          DF=""
          for f in "$CTX/Dockerfile" "$(dirname "$CTX")/Dockerfile"; do
            [ -f "$f" ] && DF="$f" && break
          done

          if [ -z "$DF" ] ; then
            echo "No Dockerfile found for $NAME under $CTX (or parent). Repo files:" >&2
            find "$CTX" -maxdepth 2 -type f -print >&2 || true
            exit 1
          fi

          echo "context=$CTX" >> $GITHUB_OUTPUT
          echo "dockerfile=$DF" >> $GITHUB_OUTPUT
          echo "Using context: $CTX"
          echo "Using Dockerfile: $DF"

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ steps.vars.outputs.IMAGE }}
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}
            type=sha,format=short,prefix=sha-
            type=ref,event=tag
            type=ref,event=branch
          labels: |
            org.opencontainers.image.source=${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}

      - name: Build & Push
        uses: docker/build-push-action@v6
        with:
          context: ${{ steps.path.outputs.context }}
          file: ${{ steps.path.outputs.dockerfile }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
